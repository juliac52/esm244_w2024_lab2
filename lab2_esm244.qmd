---
title: "Lab 2 - Time Series"
author: "Julia Cox"
format: 
html:
  code-fold: show
editor: visual
    code-fold: show
    toc: true
    number-sections: true
execute:
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(tsibble)
library(feasts)
library(fable)
```

# Part 1: Time series with Toolik Lake Data

## Always look at your data 

### Read in the data
```{r}
toolik_df <- read_csv(here('data/toolik_daily.csv'))

## Convert dataframe to timeseries
toolik_ts <- toolik_df %>% 
  mutate(date = lubridate::mdy(date)) %>% #now it knows this column in dates 
  as_tsibble(key = NULL, #if we had dates for multiple sites, we want to key by site
             index = date) #this is our times eries variable
# now it knows that the date column is time series, special column 

ggplot(toolik_ts, aes(x = date, y = daily_air_temp)) +
  geom_line() +
  labs(x = "Date", y = "Mean daily air temp (Celcius)\n Toolik Station") +
  theme_bw()
```

## Use the filter_index() function to filter by date and time 

```{r}
### Filter from December 2010 to January 2011, use filter_index() for dates
toolik_ts %>% 
  filter_index("2018-04-10" ~ "2006-05-15") #grabbs all data in that date range 

toolik_ts %>%
  filter_index("2018-01-01" ~ .) #gets dates up to the present, use "."

```

## Use index_by() to aggregate time series by increments 

```{r}
toolik_month <- toolik_ts %>%
  index_by(yr_mo = ~yearmonth(.)) %>% #identifying all the combinations of year and month
  summarize(monthly_mean_temp = mean(daily_air_temp, na.rm = TRUE)) %>%
  ungroup() #make sure there are no lingering groups
#all day info will be dropped
```

## Now let's plot that

```{r}
ggplot(data = toolik_month, aes(x = yr_mo, y = monthly_mean_temp)) +
  geom_line()

ggplot(toolik_month, aes(x = year(yr_mo), y = monthly_mean_temp)) +
  geom_line() +
  facet_wrap(~ month(yr_mo, label = TRUE)) + #breaks into multiple plots 
  labs(x = "Year", y = "Annual mean air temp (Celcius)", 
       title = "Toolik Station mean annual air temperature",
       subtitle = "1988-2023",
       caption = "<put citation here>")
```


# Part 2: Time series wrangling and forecasting 

## Energy usage by sector, in trillions of BTUs

```{r}
energy_df <- read_csv(here('data','energy.csv'))
```

### Analysis goals: 

* Examine patterns and trends in residential energy consumption over time
* Predict what residential energy use patterns will look like over the next five years 

### Pseudocode 

Visually inspect energy use over time and look for any trends, seasonality, or cycles 
Could mean energy consumption by year to look for trends across years 
Could look at how energy consumption changes within a year 

* Convert year-month to a date 
* Filter for only residential 
* Use a line plot to look at energy consumption over time 
* Convert to time series use as_tsibble 

```{r}
energy_ts <- energy_df %>%
  mutate(date = tsibble::yearmonth(yrmonth)) %>% #now it knows this column in dates 
  as_tsibble(key = sector, #group by sector
             index = date)   

```


```{r}
ggplot(energy_ts, aes(x = date, y = energy_total, color = sector)) + 
  geom_line() +
  labs(x = "Date", y = "Energy Consumption by Sector \n (Trillion BTUs)") +
  facet_wrap(~ sector, ncol = 1) +
  theme_bw()
```

* Residential looks similar to commercial with an upward trend at least for the first part, maybe leveling off or decreasing in recent years 
* Seasonality - summer and winter peaks, summer peaks seem to be getting larger over time 

### Some more helpful exploratory plots 

#### Season plot - looking at seasonal trends 
```{r}
energy_ts %>%
  filter(sector == "residential") %>%
  gg_season(y = energy_total, pal = hcl.colors(n = 9)) +
  theme_light() +
  labs(x = "Month", y = "Residential energy consumption (trillion BTU)")

```

#### Subseries plot - shows change over years broken up by month (year in the x-axis)

```{r}
energy_ts %>%
  gg_subseries(y = energy_total)

```

## Decomposition
* Allow seasonality to shift over time 
* Think about it like a moving average window 

```{r}
### Find the STL decomposition (L = LOESS) weighing recent values more than old ones. Locally estimated scatter plot smoothing 

dcmp <- energy_ts %>%
  filter(sector == "residential") %>%
  model(feasts::STL(energy_total ~ season(period = "1 year") + # ~ can be read "as a function of" 
                                          trend(window = 49)))

components(dcmp) %>%
  autoplot() #makes a plot for decomposition models 

```

### Autocorrelation function - how much weight can I give to data far out in time and still have a good prediction 
```{r}
energy_ts %>%
  filter(sector == "residential") %>%
  ACF(energy_total) %>%
  autoplot() +
  theme_bw()
```

## Forecasting by Hold Winters exponential smoothing 

Specify for each component, whether non ("N"), additive ("A"), or multiplicative ("M")
```{r}
### Create a model 
energy_fit <- energy_ts %>%
  filter(sector == "residential") %>%
  filter_index("2000-01" ~ .) %>% # Jan 2000 until now
  model(ets = ETS(energy_total ~ season(method = "M") + trend(method = "A"))) #exp. time series smoothing 

energy_forecast <- energy_fit %>%
  forecast(h = "5 years")

energy_forecast %>%
  autoplot(energy_ts) + #forecast predictions for energy consumption 
  theme_bw() 

```

```{r}
energy_predicted <- energy_fit %>%
  broom::augment()

#looking at residuals 
ggplot(energy_predicted) +
  geom_line(aes(x = date, y = energy_total)) +
  geom_line(aes(x = date, y = .fitted), color = 'red', alpha = 0.7)

ggplot(energy_predicted, aes(x = .resid)) +
  geom_histogram()
```








